{
  "reactFunctionComponentExport": {
    "prefix": "rfce",
    "body": "export default function ${1:$TM_FILENAME_BASE}() {\n\treturn <div>${1:$TM_FILENAME_BASE}</div>;\n}\n",
    "description": "创建一个默认导出的ts函数组件"
  },
  "reactArrowFunctionComponentExport": {
    "prefix": "rafce",
    "body": "import { FC } from \"react\";\n\nconst ${1:$TM_FILENAME_BASE}: FC = () => {\n\treturn <div>${1:$TM_FILENAME_BASE}</div>;\n};\n\nexport default ${1:$TM_FILENAME_BASE};\n",
    "description": "创建一个默认导出的ts箭头函数组件"
  },
  "reactErrorBoundaryComponentExport": {
    "prefix": "rebce",
    "body": "import { Component, ReactNode } from \"react\";\n\ntype TProps = { children: ReactNode };\ntype TState = { hasError: boolean };\n\nexport default class ErrorBoundary extends Component<TProps, TState> {\n\tconstructor(props: TProps) {\n\t\tsuper(props);\n\t\tthis.state = { hasError: false };\n\t}\n\n\tcomponentDidCatch(error: Error, info: unknown) {\n\t\tthis.setState({ hasError: true });\n\t\tconsole.error(error, info);\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <div>Error</div>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n",
    "description": "创建一个默认导出的ErrorBoundary组件"
  },
  "reactCustomHookFunctionExport": {
    "prefix": "rchfe",
    "body": "export default function ${1:$TM_FILENAME_BASE}() {\n\treturn {};\n}\n",
    "description": "创建一个默认导出的自定义Hook函数"
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": "const cachedCallback = useCallback(() => {\n ${1} \n}, []);\n;",
    "description": "useCallback hook"
  },
  "useContext": {
    "prefix": "useContext",
    "body": "const value = useContext(${1});",
    "description": "useContext hook"
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": "useDebugValue(${1});",
    "description": "useDebugValue hook"
  },
  "useDeferredValue": {
    "prefix": "useDeferredValue",
    "body": "const deferredValue = useDeferredValue(${1});",
    "description": "useDeferredValue hook"
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": "useEffect(() => {\n\t${1}\n}, []);\n",
    "description": "useEffect hook"
  },
  "useId": {
    "prefix": "useId",
    "body": "const ${1:id} = useId();",
    "description": "useId hook"
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": "useImperativeHandle(ref, () => {\n\t${1}\n}), [];\n",
    "description": "useImperativeHandle hook"
  },
  "useInsertionEffect": {
    "prefix": "useInsertionEffect",
    "body": "useInsertionEffect(() => {\n\t${1}\n}, []);\n",
    "description": "useInsertionEffect hook"
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": "useLayoutEffect(() => {\n\t${1}\n}, []);\n",
    "description": "useLayoutEffect hook"
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": "const cachedValue = useMemo(() => ${1}, []);",
    "description": "useMemo hook"
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": "const initialState = {}\nconst [state, dispatch] = useReducer<Reducer<any, any>>((state, action) => {\n\treturn state;\n}, initialState);\n",
    "description": "useState hook"
  },
  "useRef": {
    "prefix": "useRef",
    "body": "const ref = useRef(${1});",
    "description": "useState hook"
  },
  "useState": {
    "prefix": "useState",
    "body": "const [${1:state}, set${1:State}] = useState();",
    "description": "useState hook"
  },
  "useSyncExternalStore": {
    "prefix": "useSyncExternalStore",
    "body": "const snapshot = useSyncExternalStore(${1:store}.subscribe, ${1:store}.getSnapshot);",
    "description": "useSyncExternalStore hook"
  },
  "createContext": {
    "prefix": "createContext",
    "body": "import { createContext, FC, ReactNode, useContext } from \"react\";\n\nconst ${1}Context = createContext<unknown | undefined>(void 0);\n\ntype TProps = {\n  children: ReactNode;\n};\n\nconst ${1}Provider: FC<TProps> = ({ children }) => {\n\tconst defaultValue = {};\n\treturn <${1}Context.Provider value={defaultValue}>{children}</${1}Context.Provider>;\n};\n\nconst use${1}ContextValue = () => {\n  const store = useContext(${1}Context);\n  if (!store) throw new Error(`no ${1}Provider found`);\n  return store;\n};\n\nexport { ${1}Context, ${1}Provider, use${1}ContextValue };\n",
    "description": "createContext API"
  },
  "forwardRef": {
    "prefix": "forwardRef",
    "body": "const ${1:Component}Forward = forwardRef(function ${1:Component}Forward(props, ref) {\n\treturn <${1:Component} {...props} ref={ref} />;\n});\n",
    "description": "forwardRef API"
  },
  "lazy": {
    "prefix": "lazy",
    "body": "const ${1:Component} = lazy(() => import(\"\"));",
    "description": "lazy API"
  },
  "memo": {
    "prefix": "memo",
    "body": "const Memoized${1:Component} = memo(${1:Component});",
    "description": "memo API"
  },
  "startTransition": {
    "prefix": "startTransition",
    "body": "startTransition(() => {\n\t${1}\n});\n",
    "description": "startTransition API"
  }
}
